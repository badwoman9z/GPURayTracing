#version 430 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0,rgba16f) uniform image2D unFilteredFrame;
layout(binding = 1,rgba16f) uniform image2D FilteredFrame;
uniform int frameCounter;
struct FrameInfo{
    vec3 position;
    float meshId;
    vec4 normal;
   

};
struct PreFrameInfo {

    vec3 color;
    float meshId;
};
struct PreCameraParm {
    vec4 cameraPosition;
    mat4 preViewMat;
};
layout(std430,binding=4) buffer framessbo{
    FrameInfo frameInfo[];
};
layout(std430,binding=6) buffer preFrameInfo{
    PreFrameInfo preframeInfo[];
};
layout(std430,binding=5) buffer camerassbo{
    PreCameraParm precamera;
};
int kernalRadius = 3;

float m_sigmaCoord=32.0f;
float m_sigmaColor=0.8f;
float m_sigmaNormal=0.1f;
float m_sigmaPlane=0.1f;

FrameInfo getFrameInfo(ivec2 index){

    return frameInfo[index.x*512+index.y];

}
PreFrameInfo getPreFrameInfo(ivec2 index){

    return preframeInfo[index.x*512+index.y];
}
void main(){

	ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    int x_start = max(0,index.x-kernalRadius);
    int x_end = min(512-1,index.x+kernalRadius);
    int y_start = max(0,index.y-kernalRadius);
    int y_end = min(512-1,index.y+kernalRadius);


    vec3 resColor=vec3(0.0);
    float weight_sum=0.0f;

    vec3 centerColor = imageLoad(unFilteredFrame,index).rgb;
    //resColor = centerColor;
    FrameInfo centerFrame = getFrameInfo(index);
    for(int m=x_start;m<=x_end;m++){
    
        for(int n=y_start;n<=y_end;n++){
        
        
            if(n==index.y&&m==index.x){
            
                weight_sum+=1.0f;
                resColor+=centerColor;
            
            }
            FrameInfo cur_frameInfo = getFrameInfo(ivec2(m,n));
            vec3 cur_corlor = imageLoad(unFilteredFrame,ivec2(m,n)).xyz;
            float plane_dis = .0f;
           
           float pos_dis = distance(cur_frameInfo.position.xyz,centerFrame.position.xyz);

           float color_dis = distance(centerColor,cur_corlor);

           float normal_dis = distance(cur_frameInfo.normal.xyz,centerFrame.normal.xyz);

           if(pos_dis!=0){
           
            plane_dis = dot(centerFrame.normal.xyz,normalize(cur_frameInfo.position.xyz-centerFrame.position.xyz));
           
           }
           float weight_plane = plane_dis*plane_dis/(2.0f*m_sigmaPlane);
           float weight_pos = pos_dis*pos_dis/(2.0*m_sigmaCoord);
           float weight_corlor = color_dis*color_dis/(2.0*m_sigmaColor);
           float weight_normal = normal_dis*normal_dis/(2.0*m_sigmaNormal);


           float weight = exp(-(weight_corlor+weight_plane+weight_pos+weight_normal));
           weight_sum+=weight;
           resColor+=cur_corlor*weight;
        }
    
    }
    
    resColor/=weight_sum;
    if(centerFrame.meshId!=0){

       
       
        vec4 dir = precamera.preViewMat*vec4(centerFrame.position-precamera.cameraPosition.rgb,0.0);

        dir.xy/=dir.z;
        dir.xy*=-1.5;
        dir.xy = dir.xy*0.5+0.5;
        
        PreFrameInfo preinfo = getPreFrameInfo(ivec2(dir.xy*512.0));

        if(preinfo.meshId==centerFrame.meshId){
            
           resColor = mix(preinfo.color,resColor,1.0/float(frameCounter+1));
        }
         
    }
//
//    PreFrameInfo preinfo = getPreFrameInfo(ivec2(index));
//    resColor = mix(preinfo.color,resColor,1.0/float(frameCounter+1));



    

    imageStore(FilteredFrame,index,vec4(resColor,1.0));

}
